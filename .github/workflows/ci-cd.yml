name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-test:
    name: Build, Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: |
        dotnet restore src/NetMediate/NetMediate.csproj
        dotnet restore tests/NetMediate.Tests/NetMediate.Tests.csproj

    - name: Build solution
      run: |
        dotnet build src/NetMediate/NetMediate.csproj --no-restore --configuration Release
        dotnet build tests/NetMediate.Tests/NetMediate.Tests.csproj --no-restore --configuration Release

    - name: Run tests
      run: |
        dotnet test tests/NetMediate.Tests/NetMediate.Tests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.10
      with:
        reports: 'TestResults/**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'Html;Cobertura;MarkdownSummary'
        verbosity: 'Info'

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coveragereport/

    - name: Comment coverage on PR
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: coveragereport/Summary.md

  package:
    name: Package & Publish NuGet
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore src/NetMediate/NetMediate.csproj

    - name: Build Release
      run: dotnet build src/NetMediate/NetMediate.csproj --no-restore --configuration Release

    - name: Pack NuGet package
      run: |
        dotnet pack src/NetMediate/NetMediate.csproj \
          --no-build \
          --configuration Release \
          --output ./packages/ \
          --include-symbols \
          --include-source

    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: packages/

    - name: Publish to NuGet
      if: env.NUGET_API_KEY != ''
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push packages/*.nupkg \
          --api-key $NUGET_API_KEY \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Create GitHub Release
      if: env.NUGET_API_KEY != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the version from the generated package
        PACKAGE_VERSION=$(ls packages/*.nupkg | head -1 | sed -E 's/.*\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\.nupkg/\1/')
        echo "Package version: $PACKAGE_VERSION"
        
        # Create release
        gh release create "v$PACKAGE_VERSION" \
          --title "Release v$PACKAGE_VERSION" \
          --notes "Automated release from CI/CD pipeline" \
          --latest \
          packages/*.nupkg

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore src/NetMediate/NetMediate.csproj

    - name: Build for analysis
      run: dotnet build src/NetMediate/NetMediate.csproj --no-restore --configuration Release

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3