name: CI/CD Pipeline

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*', 'release/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Check for changes in src directory
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          src:
            - 'src/**'

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Setup .NET SDK 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore src/NetMediate/NetMediate.csproj
      
    - name: Build
      run: dotnet build src/NetMediate/NetMediate.csproj --no-restore --configuration Release
      
    - name: Test
      run: dotnet test tests/NetMediate.Tests/NetMediate.Tests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        directory: ./coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  package:
    name: Package and Publish
    runs-on: ubuntu-latest
    needs: [build-and-test, changes]
    if: (github.ref == 'refs/heads/main' && needs.changes.outputs.src == 'true') || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Setup .NET SDK 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore src/NetMediate/NetMediate.csproj
      
    - name: Build Release
      run: dotnet build src/NetMediate/NetMediate.csproj --no-restore --configuration Release
      
    - name: Run Tests
      run: dotnet test tests/NetMediate.Tests/NetMediate.Tests.csproj --no-build --configuration Release --verbosity normal
      
    - name: Pack NuGet package
      run: dotnet pack src/NetMediate/NetMediate.csproj --no-build --configuration Release --output ./packages
      
    - name: List package contents
      run: ls -la ./packages/
      
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        retention-days: 90
        
    - name: Publish to NuGet
      if: github.ref == 'refs/heads/main'
      run: dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    - name: Publish to GitHub Packages
      if: github.ref == 'refs/heads/main'
      run: dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/schivei/index.json --skip-duplicate
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Download package artifacts
      uses: actions/download-artifact@v5
      with:
        name: nuget-packages
        path: ./packages
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./packages/*.nupkg
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}